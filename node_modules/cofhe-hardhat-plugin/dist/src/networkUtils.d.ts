import { HardhatRuntimeEnvironment } from "hardhat/types";
import { HardhatEthersSigner } from "@nomicfoundation/hardhat-ethers/signers";
import { Environment, InitializationParams } from "cofhejs/node";
export declare const getCofheEnvironmentFromNetwork: (network: string) => Environment;
export declare const isPermittedCofheEnvironment: (hre: HardhatRuntimeEnvironment, env: string) => boolean;
export type HHSignerInitializationParams = Omit<InitializationParams, "tfhePublicKeySerializer" | "compactPkeCrsSerializer" | "signer" | "provider" | "mockConfig"> & {
    generatePermit?: boolean;
    environment?: Environment;
};
export declare const cofhejs_initializeWithHardhatSigner: (hre: HardhatRuntimeEnvironment, signer: HardhatEthersSigner, params?: HHSignerInitializationParams) => Promise<import("cofhejs/node").Result<import("cofhejs/node").Permit | undefined>>;
//# sourceMappingURL=networkUtils.d.ts.map